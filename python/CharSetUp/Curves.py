####################################################

#

# Character UI Setup for character Rigging tools

# Creator = Leo Michalek

# Created 18.08.2016

#

#

####################################################



import maya.cmds as cmds

import MASTER



Curves_ONOFF = True



def ColorList():

    Yellow  = [0.9,0.9,0.2]

    Red     = [0.7,0,0]

    Blue    = [0.0,0.6,0.7]

    Green   = [0.471,0.816,0.03]

    Orange  = [0.9,0.7,0.2]

    Purple  = [0.4,0.2,0.8]

    Colors  = [Yellow,Red,Blue,Green,Orange,Purple]

    return Colors

def ColorPallette(Value=0):

    ColorWheel = [[255,0,0],[255,127,0],[255,255,0],[127,255,0],[0,255,0],[0,255,127],[0,255,255],[0,127,255],[0,0,255],[127,0,255],[255,0,255],[255,0,127]]
        
    Grey    = [[255,255,255],[204,204,204],[127,127,127],[77,77,77],[0,0,0]]
    Red     = [[230,0,0],[204,0.0,0.0],[127,0.0,0],[77,0.0,0],[50,0.0,0]]
    Yellow  = [[230,230,50]]
    Blue    = [[25,102,204],[50,127,1],[0.0,204,204],[20,127,160],[110,204,204]]
    Green   = [[127,204,77],[0.0,204,77],[127,204,0.00],[0.0,204,0.00]]
    Purple  = [[102,50,204],[25,10,204]]
    Orange  = [[230,204,50],[240,160,102]]
    
    
    ColorPallette = ColorWheel + Grey + Red + Blue + Green + Purple + Orange + Yellow
    NewColorPallette = []
    for Color in ColorPallette:
        NewRGB = []
        for RGB in Color:
            NewRGB.append(float(RGB/255.0))
        NewColorPallette.append(NewRGB)
    
    #print NewColorPallette
    return NewColorPallette

def Ctrl_Curve_getColor(CurveName):

    # set color of Curve by name

    # int $Colors[] = {17,6,13,23};

    Colors = ColorList()

    Color = Colors[0]

    if(CurveName.startswith('L_')):

        Color = Colors[1]

    if(CurveName.startswith('R_')):

        Color = Colors[2]

    return Color



def Ctrl_Curve_SetColor(CurveName,SetColor = False):
    PrintNote = "Ctrl_Curve_SetColor(CurveName)"
    MASTER.PrintCheck([PrintNote,"CurveName : ",CurveName],Curves_ONOFF,["*",""])
    Color       = Ctrl_Curve_getColor(CurveName)
    if (SetColor != False):
        Color = SetColor
    ShapeNodes  = cmds.listRelatives(CurveName,type="nurbsCurve")
    for ShapeNode in ShapeNodes:
        cmds.setAttr(ShapeNode + ".overrideEnabled",0)
        #cmds.setAttr(ShapeNode + ".overrideRGBColors",1)
        #cmds.setAttr(ShapeNode + ".overrideColorRGB",Color[0],Color[1],Color[2])
    cmds.setAttr(CurveName + ".overrideEnabled",1)
    cmds.setAttr(CurveName + ".overrideRGBColors",1)

    if "Sub" in CurveName:
        Color = [Color[0] /2,Color[1]/2,Color[2]/2]
    cmds.setAttr(CurveName + ".overrideColorRGB",Color[0],Color[1],Color[2])
        
        

def Ctrl_Curve_Orient(Orient):

    MASTER.PrintCheck(["Ctrl_Curve_Orient(Orient)",Orient],Curves_ONOFF,["*",""])

    OrientA = [0,0,0]

    if(Orient == "x"):

        OrientA = [0,0,-90]

        MASTER.PrintCheck("x",Curves_ONOFF,"")

    if(Orient == "z"):

        OrientA = [90,0,0]

        MASTER.PrintCheck("z",Curves_ONOFF,"")

    if(Orient == "y"):

        OrientA = [0,0,0]

        MASTER.PrintCheck("y",Curves_ONOFF,"")

    

    MASTER.PrintCheck(["Return",OrientA],Curves_ONOFF,["","*"])

    return OrientA



def Type():

    Types = ["Joint","Circle","CircleStar","Square","Box","Box_Rectangle","Pyramid","Arrow","Arrow1","XArrows","CircleArrow","Arrow3D","Fist","Foot","Text_CTRL_Display"]

    return Types

    

def Ctrl_Curve_ShapeNodeBackUp(CTRL,GRP,ParentGRP):

    PrintNote = "Ctrl_Curve_ShapeNodeBackUp(CTRL,GRP,ParentGRP)"

    MASTER.PrintCheck([PrintNote,"CTRL : ",CTRL,"GRP : ",GRP,"ParentGRP : ",ParentGRP],Curves_ONOFF,["*",""])

    OLD = "_OLD"

    #if (GRP == None):

    #   GRP = ParentGRP

    OLD_CTRL = [ParentGRP + OLD ,GRP + OLD,CTRL + OLD]

    Ori_CTRL = [ParentGRP           ,GRP            ,CTRL]

    OLDShape = []

    if(cmds.objExists(CTRL)):
        # unlock Translate, rotate & scale. 
        
        #unparent

        Parent2 = cmds.listRelatives(CTRL,p=True)

        if(Parent2 !=None):

            cmds.parent(CTRL,w=True)

        #rename

        for i in range(len(OLD_CTRL)):

            #print Ori_CTRL[i]

            #print OLD_CTRL[i]

            if (cmds.objExists(Ori_CTRL[i] )):

                cmds.rename(Ori_CTRL[i] ,OLD_CTRL[i],ignoreShape=True)

                Shapes = cmds.listRelatives(OLD_CTRL[i],s=True)

                if(Shapes != None):

                    for Shape in Shapes:

                        CleanShape = Shape.replace(OLD,"")

                        MASTER.PrintCheck(["CleanShape : ",CleanShape])

                        cmds.rename(Shape,CleanShape + OLD)



    return [OLD_CTRL,OLD]



def Ctrl_Curve_ReplaceShapeNode(CTRL,OLD_CTRL,OLD):

    PrintNote = "Ctrl_Curve_ReplaceShapeNode(CTRL,OLD_CTRL,OLD)"

    MASTER.PrintCheck([PrintNote,"CTRL : ",CTRL,"OLD_CTRL : ",OLD_CTRL,"OLD : ",OLD],Curves_ONOFF,["*",""])

    #MASTER.BreakCode()

    

    if(cmds.objExists(CTRL)):

        #replace shapeNode

        Shapes = []

        #get shape node name of newly created Curve to delete

        DeleteShapes = []

        if(cmds.objExists(CTRL)):

            DeleteShapes = cmds.listRelatives(CTRL,s=True)

        if(cmds.objExists(OLD_CTRL[2])):

            Shapes = Ctrl_Curve_KeepShapeNode(CTRL,OLD_CTRL[2])

        if(cmds.objExists(OLD_CTRL[0])):

            cmds.delete(OLD_CTRL[0])

        if(cmds.objExists(OLD_CTRL[1])):

            cmds.delete(OLD_CTRL[1])

        

        #now that the new shape node is inside the New Transform node delete current shape node from new controller. 

        cmds.delete(DeleteShapes)

        

        #renameShapeNodes remove OLD suffix...

        #print "printing shapes. has it changes.?"

        #print Shapes

        MASTER.PrintCheck(["Cleaning Shape node names"])

        for Shape in Shapes:

            NewShape = Shape.replace(OLD,"")

            Result = cmds.rename(Shape,NewShape)

            MASTER.PrintCheck(["Shape",Shape,"NewShape",NewShape,"Result : ",Result])

        

        for OC in OLD_CTRL:

            if(cmds.objExists(OC)):

                cmds.delete(OC)

        

def Ctrl_Curve_CheckLocked(Node,SetLock=None):

    Axis = ["x","y","z"]

    Atype = ["t","r","s"]

    Locked = []

    for i in range(len(Atype)):

        At = Atype[i]

        Lock = 1

        for A in Axis:

            #print (Node + "." + At + A )

            if(cmds.getAttr(Node + "." + At + A,l=True)):

                #print (Node + "." + At + A + "  = 1")

                Lock = 0

            if(SetLock != None):

                cmds.setAttr(Node + "." + At + A,l=SetLock[i])

            #cmds.setAttr(Node + "." + At + A,l=0   ,k=1,cb=1)

        Locked.append(Lock) 

    

    return Locked

    

def Ctrl_Curve_KeepShapeNode(NewCurve,OldCurve):

    PrintNote = "Ctrl_Curve_KeepShapeNode(NewCurve,OldCurve):"

    MASTER.PrintCheck([PrintNote,"NewCurve : ",NewCurve,"OldCurve : ",OldCurve],Curves_ONOFF,["*",""])

    #check to see if curve exists.

    #Unlock both Curves. 

    Locked      = Ctrl_Curve_CheckLocked(NewCurve,[0,0,0])

    Ctrl_Curve_CheckLocked(OldCurve,[0,0,0])

    #get shapen nodes and Parent.

    Shapes      = cmds.listRelatives(OldCurve,s=True)

    OldParent   = cmds.listRelatives(OldCurve,p=True)

    if OldParent != None:

        OldParent   = cmds.listRelatives(OldCurve,p=True)[0]

    

    #restet transforms and match pivot of New curve. 

    cmds.makeIdentity(OldCurve,apply=True,t=1,r=1,s=1,n=0)#freeze transforms to make sure the rotation/orientation of the CTRL matches parent like before. 

    cmds.matchTransform(OldCurve,NewCurve,piv=True)

    #Parent Old curve to match new curve and frees transforms. 

    cmds.parent(OldCurve,NewCurve)

    cmds.makeIdentity(OldCurve,apply=True,t=1,r=1,s=1,n=0)#freeze transforms to make sure the rotation/orientation of the CTRL matches parent like before. 

    #Parent shpae nodes to new curve

    cmds.parent(Shapes,NewCurve,r=True,s=True)

    #move OLD Curve Transform back out.

    if(OldParent == None):

        cmds.parent(OldCurve,w=True)

    else:

        cmds.parent(OldCurve,OldParent)

    #reset locks attribute to new curve. 

    Ctrl_Curve_CheckLocked(NewCurve,[not Locked[0],not Locked[1],not Locked[2]])

    return Shapes

    

def Ctrl_Curve_Create(CurveName,CurveType,CurveSize,Orient):

    OrientA = Ctrl_Curve_Orient(Orient)

    Pos     = []

    Knots   = []

    Circle = False

    

    #Circle commands

    if ( CurveType == "Circle"):

        Circle = True

        CVSize = 16

        cmds.circle(n=CurveName,nr=(0,1,0),r=1,s=CVSize)

        

    

    if ( CurveType == "CircleStar"):

        Circle = True

        CVSize = 36

        TempCurveName   =   cmds.circle(n=CurveName,nr=(0,1,0),r=1.36,s=CVSize)

        CurveName = str(TempCurveName[0])

        

        cmds.select(cl=True)

        CVList = []

        for cv in range(CVSize):

            if (cv%2 == 0):

                CVList.append(CurveName + ".cv["+ str(cv) + "] ")

        cmds.scale(0.5,0.5,0.5,CVList,r=True,p=(0,0,0))

        cmds.select(cl=True)

    

    if (CurveType == "Joint"):

        Circle = True

        Ctrl    = cmds.circle(n=CurveName,r=.2,nr=(1,0,0))

        Ctrl2 = cmds.circle(n=CurveName,r=.2,nr=(0,1,0))

        Ctrl3 = cmds.circle(n=CurveName,r=.2,nr=(0,0,1))

        cmds.makeIdentity(Ctrl[0],apply=True,t=1,r=1,s=1,n=0)

        cmds.makeIdentity(Ctrl2[0],apply=True,t=1,r=1,s=1,n=0)

        cmds.makeIdentity(Ctrl3[0],apply=True,t=1,r=1,s=1,n=0)

        cmds.select((Ctrl2[0],Ctrl3[0]),r=True)

        cmds.pickWalk(d="down")

        cmds.select(Ctrl[0],add=True)

        cmds.parent(r=True,s=True)             

        cmds.delete(Ctrl2[0],Ctrl3[0]) 

        cmds.delete(Ctrl[0],ch=True)

        

    if (CurveType== "Foot"):

        Circle  = True

        Ctrl        = cmds.circle(n=CurveName,r=1,nr=(0,1,0))

        cmds.DeleteHistory(Ctrl)

        Pos     = [(0.25,0,-0.01),(-0.01,0,-0.18),(-0.27,0,-0.02),(-0.02,0,0.44),(-0.39,0,0.8),(0.01,0,1.19),(0.36,0,0.92),(0.44,0,0.47)] 

        for P in range(len(Pos)):

            cmds.setAttr(Ctrl[0] + ".controlPoints[" + str(P) + "].xValue", Pos[P][0])

            cmds.setAttr(Ctrl[0] + ".controlPoints[" + str(P) + "].yValue", Pos[P][1])

            cmds.setAttr(Ctrl[0] + ".controlPoints[" + str(P) + "].zValue", Pos[P][2])

        if(CurveName.startswith('R_')):

            cmds.setAttr(CurveName + ".scaleX",-1)

            cmds.makeIdentity(CurveName,apply=True,t=1,r=1,s=1,n=0)

            

    if(not Circle):

        if (CurveType == "Arrow1"):

            Pos     = [[0.0, 0.0, 1.0], [-0.3, 0.0, 0.4], [-0.1, 0.0, 0.5], [-0.3, 0.0, -1.0], [0.0, 0.0, -0.8], [0.3, 0.0, -1.0], [0.1, 0.0, 0.5], [0.3, 0.0, 0.4], [0.0, 0.0, 1.0]]

        if ( CurveType == "XArrows"):

            Pos     = [[0.1, 0.0, 0.1], [0.1, 0.0, 0.3], [0.1, 0.0, 1.1], [0.3, 0.0, 1.1], [0.0, 0.0, 1.7], [-0.3, 0.0, 1.1], [-0.1, 0.0, 1.1], [-0.1, 0.0, 0.3], [-0.1, 0.0, 0.1], [-0.3, 0.0, 0.1], [-1.1, 0.0, 0.1], [-1.1, 0.0, 0.3], [-1.7, 0.0, 0.0], [-1.1, 0.0, -0.3], [-1.1, 0.0, -0.1], [-0.3, 0.0, -0.1], [-0.1, 0.0, -0.1], [-0.1, 0.0, -0.3], [-0.1, 0.0, -1.1], [-0.3, 0.0, -1.1], [0.0, 0.0, -1.7], [0.3, 0.0, -1.1], [0.1, 0.0, -1.1], [0.1, 0.0, -0.3], [0.1, 0.0, -0.1], [0.3, 0.0, -0.1], [1.1, 0.0, -0.1], [1.1, 0.0, -0.3], [1.7, 0.0, 0.0], [1.1, 0.0, 0.3], [1.1, 0.0, 0.1], [0.3, 0.0, 0.1], [0.1, 0.0, 0.1]]

        if ( CurveType == "Arrow3D"):

            Pos     = [[0.0, 0.0, 1.0], [-0.45, 0.0,0.25], [-0.22, 0.0,0.25], [-0.22, 0.0, -1], [0.22, 0.0, -1], [0.22, 0.0,0.25], [0.45, 0.0,0.25], [0.0, 0.0, 1.0], [0.0, 0.45,0.25], [0.0, 0.22,0.25], [0.0, 0.22, -1], [0.0, -0.22, -1], [0.0, -0.22,0.25], [0.0, -0.45,0.25], [0.0, 0.0, 1.0]]

        if (CurveType == "CircleArrow"):

            Pos     = [(-0.0796967,16.335599,0),(-0.0796967,16.335599,0),(-0.0796967,16.335599,0),(-0.0796967,16.335599,0),(-0.0796967,16.335599,0),(-0.0796967,16.335599,0),(-0.140831,13.58455,0),(-0.140831,13.462281,0),(-0.0796967,13.462281,0),(-2.402805,16.091061,0),(-2.34167,16.091061,0),(-2.586208,16.091061,0),(-5.765198,15.174045,0),(-9.494398,13.03434,0),(-12.42885,10.40556,0),(-15.546705,5.025731,0),(-15.60784,4.903462,0),(-13.040194,4.108715,0),(-12.97906,4.108715,0),(-12.97906,4.04758,0),(-16.219184,2.274682,0),(-16.219184,2.152413,0),(-16.280318,-1.026577,0),(-15.668974,-4.327836,0),(-13.773807,-8.362707,0),(-11.206161,-11.725101,0),(-9.616666,-13.314595,0),(-9.677801,-13.37573,0),(-8.088306,-11.174891,0),(-7.966037,-11.174891,0),(-7.538096,-14.476149,0),(-7.599231,-14.476149,0),(-7.476962,-14.476149,0),(-4.114569,-15.637703,0),(0.103707,-16.065644,0),(4.505385,-15.637703,0),(9.640676,-13.314595,0),(9.579542,-13.37573,0),(9.82408,-13.253461,0),(8.17345,-11.052622,0),(8.17345,-11.052622,0),(8.234585,-10.991487,0),(11.413574,-11.602832,0),(11.413574,-11.602832,0),(11.291306,-11.663966,0),(13.43101,-9.157455,0),(15.265043,-5.244852,0),(15.876387,-1.20998,0),(15.876387,3.619639,0),(15.692984,5.025731,0),(15.570715,5.025731,0),(13.125338,4.169849,0),(13.064204,4.230983,0),(14.470296,7.22657,0),(14.592564,7.287704,0),(13.43101,9.121737,0),(11.169037,11.811652,0),(8.051181,13.951356,0),(4.505385,15.418582,0),(-0.0796967,16.274464,0),(-0.0185623,16.396733,0),(-0.140831,19.575723,0),(-0.140831,19.759126,0),(-2.586208,17.986228,0),(-2.525074,17.986228,0),(-2.769611,17.863959,0),(-6.559945,16.641271,0),(-10.411414,14.562701,0),(-13.468135,11.689383,0),(-17.258469,5.698209,0),(-17.197335,5.575941,0),(-17.258469,5.575941,0),(-18.970233,6.065016,0),(-18.970233,6.12615,0),(-18.053217,3.008295,0),(-18.053217,2.824892,0),(-17.992082,-0.965442,0),(-17.319603,-4.694642,0),(-15.546705,-9.157455,0),(-12.367715,-12.703251,0),(-10.594817,-14.781822,0),(-10.655952,-14.90409,0),(-11.695237,-16.187913,0),(-11.634102,-16.249048,0),(-11.511833,-16.187913,0),(-8.393978,-16.187913,0),(-8.210575,-16.249048,0),(-4.542509,-17.288333,0),(-0.201966,-17.716274,0),(4.627654,-16.921526,0),(10.557693,-14.781822,0),(10.80223,-14.781822,0),(11.596978,-15.821107,0),(11.596978,-15.821107,0),(12.636263,-12.947789,0),(12.758532,-13.070058,0),(12.880801,-12.886655,0),(15.020505,-9.891068,0),(16.732269,-5.856196,0),(17.893823,-1.148846,0),(17.404748,4.230983,0),(17.343613,5.514806,0),(17.282479,5.514806,0),(18.871974,6.187285,0),(18.871974,6.248419,0),(18.871974,6.187285,0),(16.304328,7.654511,0),(16.304328,7.715645,0),(16.05979,7.77678,0),(14.470296,10.588963,0),(12.147188,13.095474,0),(8.234585,15.479717,0),(4.749923,17.008077,0),(0.0425721,17.986228,0),(-0.0185623,18.047363,0),(-0.201966,16.274464,0),(-0.140831,16.335599,0),(-0.201966,16.274464,0)]

        if (CurveType == "Box_Rectangle"):

            Pos     = [[-1, 0.25, 0.5], [-1, 0.25, -0.5], [-1, -0.25, -0.5], [-1, -0.25, 0.5], [-1, 0.25, 0.5], [1, 0.25, 0.5], [1, -0.25, 0.5], [-1, -0.25, 0.5], [-1, -0.25, -0.5], [1, -0.25, -0.5], [1, -0.25, 0.5], [1, 0.25, 0.5], [1, 0.25, -0.5], [1, -0.25, -0.5], [-1, -0.25, -0.5], [-1, 0.25, -0.5], [1, 0.25, -0.5], [1, 0.25, 0.5]]

        if ( CurveType == "Square"):

            Pos     = [(1,0,1),(-1,0,1),(-1,0,-1),(1,0,-1),(1,0,1)]

        if ( CurveType ==  "Box"):

            Pos     = [(1,1,-1),(1,-1,-1),(-1,-1,-1),(-1,1,-1),(-1,1,1),(1,1,1),(1,1,-1),(1,-1,-1),(1,-1,1),(1,1,1),(-1,1,1),(-1,-1,1),(1,-1,1),(1,-1,-1),(-1,-1,-1),(-1,-1,1),(-1,1,1),(-1,1,-1),(1,1,-1)]

        if ( CurveType == "Pyramid"):

            Pos     = [(0.5,0,-0.5),(0.5,0,-0.5),(-0.5,0,-0.5),(-0.5,0,0.5),(0.5,0,0.5),(0.5,0,-0.5),(0,0.5,0),(-0.5,0,-0.5),(-0.5,0,0.5),(0,0.5,0),(0.5,0,0.5)] 

        if ( CurveType == "Fist"):

            Pos     = [(-0.0146565,0,-3.753342),(5.354182,0,-3.130167),(11.361904,0,-7.116714),(15.660418,0,-4.019063),(13.888684,0,0.110603),(12.450624,0,0.145662),(12.220926,0,-2.456756),(13.27739,0,-3.165497),(13.110674,0,-3.286901),(12.512756,0,-3.180312),(12.049358,0,-2.916607),(11.860229,0,-3.273333),(11.887515,0,-3.753264),(11.673663,0,-3.911146),(10.86137,0,-1.82532),(6.329878,0,0.614108),(5.71402,0,-0.0817594),(5.643409,0,0.571982),(0,0,0),(0.0102015,0,0.698879),(5.637127,0,1.039325),(5.49386,0,1.630483),(10.792178,0,-1.344237),(10.684265,0,-0.279646),(9.825075,0,1.485802),(8.592877,0,2.732981),(10.015382,0,4.837231),(11.468051,0,6.047457),(8.865864,0,2.827683),(9.965009,0,1.894527),(12.826964,0,4.363941),(13.097914,0,4.115742),(10.121858,0,1.476262),(10.984866,0,-0.248343),(11.11076,0,-0.791964),(11.754081,0,-2.62095),(11.980276,0,-2.749277),(11.90713,0,-1.696893),(12.193651,0,-0.290973),(12.117396,0,-0.0280707),(11.420508,0,-0.419184),(11.11076,0,-0.791964),(10.984866,0,-0.248343),(14.554745,0,2.439642),(14.820071,0,2.096625),(12.706169,0,0.561161),(12.768977,0,0.374237),(14.00016,0,0.46361),(14.746397,0,-0.883339),(16.641487,0,0.287158),(16.846306,0,0.00923628),(14.93097,0,-1.260076),(15.862386,0,-3.512412),(18.437859,0,-1.551634),(17.212704,0,0.120668),(16.846306,0,0.00923628),(16.641487,0,0.287158),(16.959881,0,0.634774),(15.303982,0,2.422335),(14.820071,0,2.096625),(14.554745,0,2.439642),(14.978665,0,2.735265),(13.542819,0,4.323399),(13.097914,0,4.115742),(12.826964,0,4.363941),(13.166805,0,4.677641),(11.468051,0,6.047457),(10.015382,0,4.837231),(6.082381,0,4.129467),(4.817304,0,2.957689),(0.0620387,0,3.043987),(0.0102015,0,0.698879),(0,0,0),(-0.0146565,0,-3.753342)]

        #text specific Curves.... maybe somewhere else?

        if ( CurveType == "Text_CTRL_Display"):

			Pos 	= [[0.0, 0.0, 0.0], [1.43, 0.0, 0.0], [1.44, 0.0, 0.0], [1.43, 0.0, 0.0], [1.01, 0.0, -0.06], [0.56, 0.0, -0.35], [0.3, 0.0, -0.76], [0.2, 0.0, -1.37], [0.28, 0.0, -1.96], [0.44, 0.0, -2.28], [0.78, 0.0, -2.61], [1.33, 0.0, -2.79], [2.04, 0.0, -2.68], [2.47, 0.0, -2.3], [2.6, 0.0, -2.0], [2.59, 0.0, -1.99], [2.1, 0.0, -1.9], [1.97, 0.0, -2.16], [1.67, 0.0, -2.37], [1.29, 0.0, -2.38], [0.89, 0.0, -2.14], [0.74, 0.0, -1.83], [0.7, 0.0, -1.31], [0.76, 0.0, -0.9], [1.02, 0.0, -0.52], [1.28, 0.0, -0.41], [1.7, 0.0, -0.45], [1.92, 0.0, -0.62], [2.04, 0.0, -0.83], [2.1, 0.0, -0.99], [2.1, 0.0, -1.0], [2.6, 0.0, -0.8], [2.59, 0.0, -0.79], [2.53, 0.0, -0.61], [2.41, 0.0, -0.41], [2.2, 0.0, -0.2], [1.8, 0.0, -0.03], [1.43, 0.0, 0.0], [1.44, 0.0, 0.0], [1.44, 0.0, 0.0], [4.23, 0.0, 0.0], [4.24, 0.0, 0.0], [4.24, 0.0, 0.0], [4.25, 0.0, -0.4], [4.24, 0.0, -0.4], [4.21, 0.0, -0.4], [3.94, 0.0, -0.48], [3.75, 0.0, -0.62], [3.51, 0.0, -1.16], [3.53, 0.0, -1.77], [3.68, 0.0, -2.1], [3.95, 0.0, -2.32], [4.41, 0.0, -2.39], [4.77, 0.0, -2.25], [5.01, 0.0, -1.93], [5.11, 0.0, -1.49], [5.07, 0.0, -1.11], [4.95, 0.0, -0.76], [4.71, 0.0, -0.51], [4.46, 0.0, -0.41], [4.26, 0.0, -0.4], [4.24, 0.0, -0.39], [4.24, 0.0, -0.37], [4.23, 0.0, 0.0], [4.26, 0.0, 0.0], [4.24, 0.0, 0.0], [3.92, 0.0, -0.04], [3.6, 0.0, -0.17], [3.32, 0.0, -0.39], [3.06, 0.0, -0.87], [3.0, 0.0, -1.29], [3.02, 0.0, -1.69], [3.13, 0.0, -2.11], [3.35, 0.0, -2.43], [3.81, 0.0, -2.72], [4.11, 0.0, -2.79], [4.56, 0.0, -2.77], [5.0, 0.0, -2.62], [5.36, 0.0, -2.27], [5.57, 0.0, -1.74], [5.59, 0.0, -1.22], [5.52, 0.0, -0.84], [5.37, 0.0, -0.52], [5.14, 0.0, -0.27], [4.79, 0.0, -0.07], [4.56, 0.0, -0.01], [4.27, 0.0, 0.0], [4.24, 0.0, 0.0], [4.24, 0.0, 0.0], [6.1, 0.0, 0.0], [6.08, 0.0, 0.0], [6.1, 0.0, 0.0], [6.1, 0.0, -2.8], [6.67, 0.0, -2.8], [6.67, 0.0, -2.79], [6.67, 0.0, -2.79], [7.9, 0.0, -0.42], [7.9, 0.0, -2.8], [7.9, 0.0, -2.8], [8.3, 0.0, -2.8], [8.3, 0.0, 0.0], [8.29, 0.0, 0.0], [8.3, 0.0, 0.0], [7.66, 0.0, 0.0], [7.66, 0.0, -0.01], [6.5, 0.0, -2.32], [6.5, 0.0, 0.0], [6.49, 0.0, 0.0], [6.5, 0.0, 0.0], [6.07, 0.0, 0.0], [6.07, 0.0, 0.0], [6.06, 0.0, 0.0], [9.5, 0.0, 0.0], [9.51, 0.0, 0.0], [9.5, 0.0, -2.4], [8.69, 0.0, -2.4], [8.69, 0.0, -2.8], [10.8, 0.0, -2.8], [10.79, 0.0, -2.4], [10.8, 0.0, -2.4], [10.79, 0.0, -2.4], [10.0, 0.0, -2.39], [10.0, 0.0, -2.4], [10.0, 0.0, 0.0], [9.97, 0.0, 0.0], [9.5, 0.0, 0.0], [11.2, 0.0, 0.0], [11.2, 0.0, -2.8], [11.2, 0.0, -2.8], [11.2, 0.0, -2.8], [12.51, 0.0, -2.79], [12.53, 0.0, -2.79], [12.55, 0.0, -2.79], [13.09, 0.0, -2.65], [13.33, 0.0, -2.36], [13.38, 0.0, -1.83], [13.22, 0.0, -1.5], [12.94, 0.0, -1.31], [12.74, 0.0, -1.25], [12.73, 0.0, -1.25], [12.87, 0.0, -1.14], [13.02, 0.0, -0.97], [13.24, 0.0, -0.59], [13.39, 0.0, -0.34], [13.6, 0.0, 0.0], [13.02, 0.0, -0.01], [13.05, 0.0, 0.0], [12.7, 0.0, -0.53], [12.46, 0.0, -0.87], [12.31, 0.0, -1.05], [12.08, 0.0, -1.18], [11.87, 0.0, -1.19], [11.7, 0.0, -1.18], [11.7, 0.0, -1.19], [11.7, 0.0, -1.64], [11.7, 0.0, -1.65], [11.7, 0.0, -1.66], [11.7, 0.0, -2.4], [11.7, 0.0, -2.39], [11.7, 0.0, -2.4], [12.45, 0.0, -2.39], [12.6, 0.0, -2.38], [12.74, 0.0, -2.33], [12.87, 0.0, -2.15], [12.89, 0.0, -1.93], [12.78, 0.0, -1.7], [12.64, 0.0, -1.63], [12.48, 0.0, -1.6], [12.35, 0.0, -1.6], [11.87, 0.0, -1.6], [11.7, 0.0, -1.6], [11.7, 0.0, -1.58], [11.7, 0.0, -1.6], [11.7, 0.0, -1.19], [11.7, 0.0, 0.0], [11.65, 0.0, 0.0], [11.2, 0.0, 0.0], [15.16, 0.0, 0.0], [15.14, 0.0, 0.0], [14.88, 0.0, -0.03], [14.5, 0.0, -0.17], [14.15, 0.0, -0.49], [13.95, 0.0, -0.91], [13.9, 0.0, -1.17], [13.91, 0.0, -1.61], [14.01, 0.0, -2.06], [14.19, 0.0, -2.35], [14.55, 0.0, -2.66], [14.97, 0.0, -2.78], [15.3, 0.0, -2.79], [15.86, 0.0, -2.64], [16.22, 0.0, -2.33], [16.45, 0.0, -1.83], [16.49, 0.0, -1.27], [16.4, 0.0, -0.8], [16.09, 0.0, -0.32], [15.67, 0.0, -0.07], [15.12, 0.0, 0.0], [15.12, 0.0, 0.0], [15.13, 0.0, 0.0], [15.13, 0.0, -0.4], [15.13, 0.0, -0.4], [15.11, 0.0, -0.4], [14.84, 0.0, -0.48], [14.61, 0.0, -0.67], [14.42, 0.0, -1.08], [14.41, 0.0, -1.64], [14.5, 0.0, -1.98], [14.84, 0.0, -2.32], [15.22, 0.0, -2.39], [15.6, 0.0, -2.29], [15.9, 0.0, -1.96], [15.99, 0.0, -1.44], [15.95, 0.0, -1.0], [15.73, 0.0, -0.6], [15.47, 0.0, -0.44], [15.13, 0.0, -0.38], [15.13, 0.0, -0.37], [15.12, 0.0, 0.0], [15.13, 0.0, 0.0], [17.0, 0.0, -0.01], [17.05, 0.0, 0.0], [17.0, 0.0, -2.8], [17.0, 0.0, -2.8], [17.5, 0.0, -2.79], [17.5, 0.0, -2.8], [17.51, 0.0, -0.4], [19.0, 0.0, -0.4], [19.0, 0.0, 0.0], [18.99, 0.0, 0.0], [17.0, 0.0, 0.0], [17.0, 0.0, 0.0], [19.39, 0.0, 0.0], [19.39, 0.0, 0.0], [19.39, 0.0, -2.8], [19.41, 0.0, -2.8], [19.89, 0.0, -2.8], [19.89, 0.0, -2.79], [19.89, 0.0, -0.4], [21.4, 0.0, -0.39], [21.4, 0.0, -0.4], [21.4, 0.0, -0.39], [21.38, 0.0, 0.0], [21.4, 0.0, 0.0], [21.36, 0.0, 0.0], [19.39, 0.0, 0.0], [21.8, 0.0, -0.01], [21.8, 0.0, -0.02], [21.8, 0.0, -2.8], [21.8, 0.0, -2.77], [23.8, 0.0, -2.8], [23.8, 0.0, -2.4], [23.75, 0.0, -2.4], [23.76, 0.0, -2.4], [22.3, 0.0, -2.38], [22.3, 0.0, -2.4], [22.3, 0.0, -1.7], [23.7, 0.0, -1.69], [23.69, 0.0, -1.3], [23.7, 0.0, -1.3], [23.69, 0.0, -1.3], [22.3, 0.0, -1.29], [22.3, 0.0, -0.4], [23.9, 0.0, -0.39], [23.89, 0.0, 0.0], [21.8, 0.0, 0.0], [21.8, 0.0, 0.0], [21.8, 0.0, 0.0], [24.4, 0.0, 0.0], [24.4, 0.0, -2.8], [25.83, 0.0, -2.78], [26.06, 0.0, -2.75], [26.37, 0.0, -2.59], [26.57, 0.0, -2.23], [26.58, 0.0, -1.83], [26.42, 0.0, -1.5], [26.19, 0.0, -1.33], [25.93, 0.0, -1.25], [26.11, 0.0, -1.1], [26.33, 0.0, -0.8], [26.61, 0.0, -0.31], [26.8, 0.0, 0.0], [26.22, 0.0, -0.01], [24.4, 0.0, 0.0], [24.4, 0.0, 0.0], [24.4, 0.0, 0.0], [24.86, 0.0, 0.0], [24.9, 0.0, 0.0], [24.9, 0.0, -1.16], [24.9, 0.0, -1.6], [24.9, 0.0, -2.37], [24.9, 0.0, -2.38], [24.9, 0.0, -2.4], [25.78, 0.0, -2.39], [26.03, 0.0, -2.24], [26.09, 0.0, -1.96], [25.96, 0.0, -1.69], [25.64, 0.0, -1.6], [24.9, 0.0, -1.6], [24.9, 0.0, -1.16], [24.9, 0.0, -1.17], [24.9, 0.0, -1.16], [25.24, 0.0, -1.18], [25.57, 0.0, -0.98], [25.88, 0.0, -0.56], [26.23, 0.0, 0.0], [28.3, 0.0, 0.0], [28.3, 0.0, -2.78], [28.3, 0.0, -2.79], [28.3, 0.0, -2.78], [29.44, 0.0, -2.79], [30.0, 0.0, -2.67], [30.26, 0.0, -2.46], [30.56, 0.0, -1.82], [30.59, 0.0, -1.23], [30.47, 0.0, -0.67], [30.3, 0.0, -0.37], [30.0, 0.0, -0.12], [29.59, 0.0, -0.01], [29.17, 0.0, 0.0], [28.3, 0.0, 0.0], [28.3, 0.0, 0.0], [28.31, 0.0, 0.0], [28.8, 0.0, -0.4], [28.86, 0.0, -0.4], [28.8, 0.0, -0.4], [28.8, 0.0, -2.4], [29.54, 0.0, -2.37], [29.94, 0.0, -2.13], [30.06, 0.0, -1.84], [30.09, 0.0, -1.29], [30.07, 0.0, -0.99], [29.91, 0.0, -0.59], [29.65, 0.0, -0.43], [29.32, 0.0, -0.4], [28.8, 0.0, -0.41], [28.8, 0.0, -0.4], [28.3, 0.0, 0.0], [31.11, 0.0, 0.0], [31.13, 0.0, 0.0], [31.17, 0.0, 0.0], [31.1, 0.0, -2.77], [31.1, 0.0, -2.78], [31.1, 0.0, -2.77], [31.6, 0.0, -2.8], [31.6, 0.0, -2.79], [31.6, 0.0, 0.0], [31.1, 0.0, 0.0], [31.1, 0.0, 0.0], [30.98, 0.0, 0.0], [33.17, 0.0, 0.0], [33.2, 0.0, 0.0], [33.23, 0.0, 0.0], [32.79, 0.0, -0.02], [32.49, 0.0, -0.11], [32.2, 0.0, -0.32], [32.05, 0.0, -0.57], [32.0, 0.0, -0.78], [32.0, 0.0, -0.77], [32.0, 0.0, -0.79], [32.5, 0.0, -0.9], [32.59, 0.0, -0.66], [32.76, 0.0, -0.49], [33.2, 0.0, -0.4], [33.53, 0.0, -0.45], [33.77, 0.0, -0.65], [33.78, 0.0, -0.85], [33.62, 0.0, -1.01], [33.19, 0.0, -1.14], [32.67, 0.0, -1.3], [32.35, 0.0, -1.48], [32.13, 0.0, -1.79], [32.11, 0.0, -2.18], [32.23, 0.0, -2.44], [32.5, 0.0, -2.67], [32.81, 0.0, -2.77], [33.32, 0.0, -2.79], [33.71, 0.0, -2.7], [34.04, 0.0, -2.45], [34.17, 0.0, -2.16], [34.2, 0.0, -2.0], [33.69, 0.0, -2.01], [33.69, 0.0, -2.02], [33.69, 0.0, -2.0], [33.61, 0.0, -2.2], [33.3, 0.0, -2.38], [32.84, 0.0, -2.35], [32.62, 0.0, -2.19], [32.65, 0.0, -1.9], [32.97, 0.0, -1.73], [33.42, 0.0, -1.61], [33.86, 0.0, -1.46], [34.21, 0.0, -1.15], [34.29, 0.0, -0.85], [34.18, 0.0, -0.4], [33.94, 0.0, -0.17], [33.59, 0.0, -0.04], [33.24, 0.0, 0.0], [33.21, 0.0, 0.0], [33.23, 0.0, 0.0], [34.79, 0.0, 0.0], [34.79, 0.0, -2.78], [34.79, 0.0, -2.79], [36.01, 0.0, -2.79], [36.56, 0.0, -2.66], [36.76, 0.0, -2.46], [36.89, 0.0, -2.1], [36.88, 0.0, -1.76], [36.71, 0.0, -1.4], [36.4, 0.0, -1.18], [35.99, 0.0, -1.1], [35.29, 0.0, -1.1], [35.29, 0.0, -1.5], [35.29, 0.0, -2.4], [35.29, 0.0, -2.38], [35.97, 0.0, -2.38], [36.29, 0.0, -2.24], [36.39, 0.0, -2.02], [36.35, 0.0, -1.75], [36.22, 0.0, -1.6], [35.89, 0.0, -1.5], [35.29, 0.0, -1.5], [35.29, 0.0, 0.0], [34.79, 0.0, 0.0], [37.4, 0.0, 0.0], [37.4, 0.0, 0.0], [37.4, 0.0, 0.0], [37.4, 0.0, -2.77], [37.4, 0.0, -2.8], [37.9, 0.0, -2.8], [37.9, 0.0, -0.4], [39.4, 0.0, -0.4], [39.4, 0.0, -0.39], [39.4, 0.0, 0.0], [39.39, 0.0, 0.0], [37.4, 0.0, 0.0], [37.39, 0.0, 0.0], [39.52, 0.0, 0.0], [39.5, 0.0, 0.0], [39.5, 0.0, 0.0], [40.52, 0.0, -2.8], [41.17, 0.0, -2.8], [42.2, 0.0, 0.0], [41.67, 0.0, 0.0], [41.69, 0.0, 0.0], [41.7, 0.0, 0.0], [40.85, 0.0, -2.4], [40.02, 0.0, 0.0], [39.99, 0.0, 0.0], [39.4, 0.0, 0.0], [39.35, 0.0, 0.0], [40.01, 0.0, 0.0], [40.02, 0.0, 0.0], [40.37, 0.0, -1.0], [40.36, 0.0, -0.98], [40.37, 0.0, -1.0], [41.32, 0.0, -1.0], [41.35, 0.0, -0.98], [41.34, 0.0, -1.01], [41.47, 0.0, -0.58], [41.47, 0.0, -0.58], [41.47, 0.0, -0.58], [40.23, 0.0, -0.6], [40.23, 0.0, -0.61], [40.23, 0.0, -0.59], [40.02, 0.0, 0.0], [43.2, 0.0, -0.01], [43.23, 0.0, 0.0], [43.2, 0.0, -1.17], [43.2, 0.0, -1.17], [43.2, 0.0, -1.17], [42.15, 0.0, -2.8], [42.72, 0.0, -2.8], [42.73, 0.0, -2.78], [43.44, 0.0, -1.6], [43.47, 0.0, -1.62], [44.17, 0.0, -2.8], [44.17, 0.0, -2.79], [44.75, 0.0, -2.8], [43.73, 0.0, -1.22], [43.7, 0.0, -1.17], [43.7, 0.0, -1.17], [43.7, 0.0, -1.15], [43.69, 0.0, 0.0], [43.7, 0.0, 0.0], [43.2, 0.0, 0.0], [43.2, 0.0, 0.0]]



        knots = [ X for  X in range(len(Pos))]

        cmds.curve(n=CurveName, d=1, p=Pos,k=Knots )    

    

    if(len(Pos)>0 or Circle):

        #rotate for axis

        cmds.rotate( OrientA[0], OrientA[1], OrientA[2], CurveName )

        cmds.makeIdentity(CurveName,apply=True,t=1,r=1,s=1,n=2)

        #set Curve color

        Ctrl_Curve_SetColor(CurveName)

        cmds.select(cl=True)

    else:

        MASTER.PrintCheck(CurveType + " Does not exists... No matches found",Curves_ONOFF,"")



    #print ("\n Created Curve: " + $CurveName + " -- CurveType: " +  $CurveType + "\n");

